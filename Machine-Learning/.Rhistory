#Adagrad
m <- 1
eta <- 1.0
Tmax <- 500
w_seed <- c(0,0)
w <- w_seed
w_chain <- c()
Qstop <- 0
t <- 0
G <- rep(0.0,times=length(w))
eps <- 10^(-6)
loss_fun <- function(w,z) {
x = z[1]
y = z[2]
lambda <- 0
ell <- max(0, 1-y * t(w) * x) + lambda*norm(w, type = c("2"))^2
return (ell)
}
empirical_risk_fun <- function(w,z,n) {
x = z[,1]
y = z[,2]
R <- 0.0
for (i in 1:n) {
R <- R + loss_fun(w,z[i,])
}
R <- R / n
return (R)
}
while ( Qstop == 0 ) {
# counter
t <- t +  1
cat( t ) ; cat( ' ' ) ## counter added for display reasons
# step 1: update
J <- sample.int(n = n_obs, size = m, replace = TRUE)
if (m==1) {
zbatch <- matrix(z_obs[J,],1,2)
} else {
zbatch <- z_obs[J,]
}
#eta <- learning_rate( t )
erf_fun <- function(w, z = zbatch, n=m) {
return( empirical_risk_fun(w, z, n) )
}
g <- numDeriv::grad( erf_fun, w )
G <- G + g^2
w <- w - eta * (1.0/sqrt(G+eps)) * g
#w <- w - eta * grad_risk_fun( w, zbatch, m )
w_chain <- rbind(w_chain, w)
# step 2: check for rtermination terminate
if ( t>= Tmax ) {
Qstop <- 1
}
}
n_obs <- 1000000
#Adagrad
m <- 1
eta <- 1.0
Tmax <- 500
w_seed <- c(0,0)
w <- w_seed
w_chain <- c()
Qstop <- 0
t <- 0
G <- rep(0.0,times=length(w))
eps <- 10^(-6)
loss_fun <- function(w,z) {
x = z[1]
y = z[2]
lambda <- 0
ell <- max(0, 1-y * t(w) * x) + lambda*norm(w, type = c("2"))^2
return (ell)
}
empirical_risk_fun <- function(w,z,n) {
x = z[,1]
y = z[,2]
R <- 0.0
for (i in 1:n) {
R <- R + loss_fun(w,z[i,])
}
R <- R / n
return (R)
}
while ( Qstop == 0 ) {
# counter
t <- t +  1
cat( t ) ; cat( ' ' ) ## counter added for display reasons
# step 1: update
J <- sample.int(n = n_obs, size = m, replace = TRUE)
if (m==1) {
zbatch <- matrix(z_obs[J,],1,2)
} else {
zbatch <- z_obs[J,]
}
#eta <- learning_rate( t )
erf_fun <- function(w, z = zbatch, n=m) {
return( empirical_risk_fun(w, z, n) )
}
g <- numDeriv::grad( erf_fun, w )
G <- G + g^2
w <- w - eta * (1.0/sqrt(G+eps)) * g
#w <- w - eta * grad_risk_fun( w, zbatch, m )
w_chain <- rbind(w_chain, w)
# step 2: check for rtermination terminate
if ( t>= Tmax ) {
Qstop <- 1
}
}
#(5)
data_generating_model <- function(n,w) {
z <- rep( NaN, times=n*3 )
z <- matrix(z, nrow = n, ncol = 3)
z[,1] <- rep(1,times=n)
z[,2] <- runif(n, min = -10, max = 10)
p <- w[1]*z[,1] + w[2]*z[,2] p <- exp(p) / (1+exp(p))
